import os
import json
import requests
from typing import List, Dict, Any

from fastapi import APIRouter, Depends, HTTPException, WebSocket, WebSocketDisconnect, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, insert
import redis

from auth.database import get_async_session
from models.models import Order, User
from dto import dto as DTO

class OrderService:
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
        self.TELEGRAM_BOT_TOKEN = os.environ.get(
            'BOT_TOKEN', 
            '6937107637:AAFarU8swL-mp7oLC0sMz44A7-F3q0QuD4Y'
        )
        self.CLIENT_BOT_TOKEN = os.environ.get(
            'CLIENT_BOT_TOKEN', 
            '6937107637:AAFarU8swL-mp7oLC0sMz44A7-F3q0QuD4Y'
        )
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        self.redis_client = redis.Redis(
            host=os.environ.get('REDIS_HOST', '127.0.0.1'),
            port=int(os.environ.get('REDIS_PORT', 6379)),
            decode_responses=True
        )

    def _format_telegram_message(self, order_dto: DTO.Order) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        """
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è
        delivery_type = "–î–û–°–¢–ê–í–ö–ê" if order_dto.isDelivery else "–°–ê–ú–û–í–´–í–û–ó"
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –±–ª—é–¥
        order_items_str = "".join([
            f"{item['count']}   x   {item['foodName']}    {item['price']} —Ä—É–±.\n" 
            for item in order_dto.items
        ])
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        full_message = (
            f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_dto.number}\n\n"
            f"–û–ø–ª–∞—Ç–∞: {order_dto.payment}\n\n"
            f"–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {delivery_type}\n\n"
            f"üìç–ê–¥—Ä–µ—Å: {order_dto.address}\n\n"
            f"–ó–∞–∫–∞–∑:\n{order_items_str}"
            f"{order_dto.cutlery}  x  –ü—Ä–∏–±–æ—Ä–æ–≤\n\n"
            f"–ò—Ç–æ–≥–æ: {order_dto.total}"
        )
        
        return full_message

    def _send_telegram_message(self, chat_id: int, message: str, token: str):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        """
        try:
            requests.get(
                f"https://api.telegram.org/bot{token}/sendMessage",
                params={
                    "chat_id": chat_id, 
                    "text": message
                }
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

    async def get_all_orders(self, session: AsyncSession) -> List[Order]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            query = select(Order)
            result = await session.execute(query)
            return result.scalars().all()
        except Exception as e:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, 
                detail=str(e)
            )

    async def save_to_redis(self, data: DTO.Order, session: AsyncSession) -> Dict[str, Any]:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Redis
        """
        try:
            query = select(User.chatID).where(data.client == User.id)
            result = await session.execute(query)
            chat_id = result.mappings().all()
            print(chat_id)
            print(data)
            data.client = chat_id[0]["chatID"]
            order_id = self.redis_client.incr("order_id")
            redis_key = f"order:{order_id}"
            self.redis_client.set(redis_key, json.dumps(data.model_dump()))
            return {"status": "success", "order_id": order_id, "chat_id": chat_id}
        # return {"status": "success", "chat_id": chat_id}
        except Exception as e:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, 
                detail=str(e)
            )
    
    async def create_order(
        self, 
        order_dto: DTO.Order,
        chatID: int,
        session: AsyncSession
    ):
        """
        –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:
        1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        2. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis
        """
        # try:
            # 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        query = insert(Order).values(order_dto.model_dump())
        result = await session.execute(query)
        await session.commit()

        # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        telegram_message = self._format_telegram_message(order_dto)
        
        # –ü–æ–ª—É—á–∞–µ–º chat ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        admin_query = select(User.chatID).where(User.role == "admin")
        admin_result = await session.execute(admin_query)
        admin_chat_ids = os.getenv('ADMIN_CHAT_ID', '').split(' ')

        # for admin_chat_id in admin_chat_ids:
        #     self._send_telegram_message(admin_chat_id, telegram_message, self.TELEGRAM_BOT_TOKEN)
        
        text_for_send = (
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n"
            f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_dto.number} –ø—Ä–∏–Ω—è—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n"
            f"–û–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 18 –º–∏–Ω—É—Ç.\n\n"
            f"–û–ø–ª–∞—Ç–∞: {order_dto.payment}\n\n"
            f"‚ùóÔ∏è{'–î–û–°–¢–ê–í–ö–ê' if order_dto.isDelivery else '–°–ê–ú–û–í–´–í–û–ó'}‚ùóÔ∏è\n\n"
            f"üìç –ê–¥—Ä–µ—Å: {order_dto.address}\n\n"
            f"–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n" +
            "".join(
                [f"{item['count']} x {item['foodName']} - {item['price']} —Ä—É–±.\n" for item in order_dto.items]
            ) +
            f"\n–ü—Ä–∏–±–æ—Ä—ã: {order_dto.cutlery} —à—Ç.\n\n"
            f"–ò—Ç–æ–≥–æ: {order_dto.total} —Ä—É–±.\n\n"
            f"üíÆüçú "
        )

        self._send_telegram_message(chatID, text_for_send, self.CLIENT_BOT_TOKEN)
        # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis
        await self.save_to_redis(order_dto, session)

        return {"status": "success", "order_number": order_dto.number}

        # except Exception as e:
        #     await session.rollback()
        #     raise HTTPException(
        #         status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, 
        #         detail=str(e)
        #     )


    def redis_health_check(self) -> Dict[str, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Redis
        """
        try:
            self.redis_client.ping()
            return {"status": "ok", "message": "Redis is working"}
        except Exception as e:
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE, 
                detail=str(e)
            )
    async def send_message(self, message: str, client: int, session: AsyncSession):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        """
        try:
            self._send_telegram_message(client, message, self.CLIENT_BOT_TOKEN)
            return {"status": "success"}
        except Exception as e:
            raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))

class OrderWebsocketManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
    def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)
    async def send_personal_message(self, message: str, websocket: WebSocket):
        await websocket.send_text(message)
    async def broadcast(self, message: str):
        for connection in self.active_connections:
            await connection.send_text(message)

manager = OrderWebsocketManager()


# –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
order_service = OrderService()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
orderRouter = APIRouter()

@orderRouter.post("/")
async def create_order(
    order: DTO.Order, 
    chatID: int,
    session: AsyncSession = Depends(get_async_session)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î, –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram –∏ Redis
    """
    return await order_service.create_order(order, chatID, session)

@orderRouter.get("/")
async def get_orders(
    session: AsyncSession = Depends(get_async_session)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    return await order_service.get_all_orders(session)

@orderRouter.post("/redis")
async def save_to_redis(data: DTO.Order, session: AsyncSession = Depends(get_async_session)):
    """
    –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Redis
    """
    return await order_service.save_to_redis(data, session)

@orderRouter.get("/redis/health")
async def redis_health():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Redis
    """
    return order_service.redis_health_check()

class ConnectionManager:
    def __init__(self):
        self.active_connections: list[WebSocket] = []
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)

    async def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)

    async def send_personal_message(self, message: str, websocket: WebSocket):
        await websocket.send_text(message)

    async def broadcast(self, message: str):
        for connection in self.active_connections:
            await connection.send_text(message)
            print(connection)


manager = ConnectionManager()
@orderRouter.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await manager.disconnect(websocket)
    # try:
    #     while True:
    #         global currentPayment
    #         currentPayment = {}
    #         data = await websocket.receive_text()
    #         print(data)
    #         await manager.broadcast(f'[{data},'.join(json.dumps(currentPayment)) + ']')
    #         print(currentPayment)
            
    # except WebSocketDisconnect:
    #     await manager.disconnect(websocket)


@orderRouter.post("/send-message")
async def send_message(message: str, client: int, session: AsyncSession = Depends(get_async_session)):
    print(type(client))
    return await order_service.send_message(message, client, session)