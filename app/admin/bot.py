import asyncio
import os
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from dotenv import load_dotenv
from redis import Redis
import requests
from dto import dto as DTO
from routers.order import send_message

load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_IDS = os.getenv("ADMIN_CHAT_ID", "").split()  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ —á–∞—Ç—ã
REDIS_HOST = os.getenv("REDIS_HOST", "0.0.0.0")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not API_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ BOT_TOKEN —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis
redis_client = Redis(host=REDIS_HOST, port=6379, decode_responses=True)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
last_processed_order_id = 0


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
def format_order(order):
    order_number = order.get("number", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    payment = order.get("payment", "None")
    address = order.get("address", "–ù–µ —É–∫–∞–∑–∞–Ω")
    is_delivery = order.get("isDelivery", False)
    cutlery_count = order.get("cutlery", 0)
    total = order.get("total", 0)
    items = order.get("items", [])

    order_lines = []
    for item in items:
        food_name = item.get("foodName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        count = item.get("count", 0)
        price = item.get("price", 0)
        order_lines.append(f"{count} x {food_name} {price * count} —Ä—É–±.")

    result = f"""
–ù–û–í–´–ô –ó–ê–ö–ê–ó ‚Ññ{order_number} 

–û–ø–ª–∞—Ç–∞: {payment}

{'‚ùóÔ∏è–î–û–°–¢–ê–í–ö–ê‚ùóÔ∏è' if is_delivery else '‚ùóÔ∏è–ó–ê–ë–†–ê–¢–¨ –°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–û‚ùóÔ∏è'}

üìç–ê–¥—Ä–µ—Å: {address}

–ó–∞–∫–∞–∑:
{chr(10).join(order_lines)}

{cutlery_count} x –ü—Ä–∏–±–æ—Ä–æ–≤

–ò—Ç–æ–≥–æ: {total} —Ä—É–±.
"""
    return result.strip()


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
class Order:
    def __init__(self):
        self.CLIENT_BOT_TOKEN = os.environ.get("CLIENT_BOT_TOKEN")
        if not self.CLIENT_BOT_TOKEN:
            raise ValueError("CLIENT_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ —Ñ–∞–π–ª–µ .env")

    def _format_telegram_message(self, order_dto: DTO.Order) -> str:
        return f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_dto.number}, –Ω–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å!"

    def _send_telegram_message(self, chat_id: int, message: str):
        try:
            response = requests.get(
                f"https://api.telegram.org/bot{self.CLIENT_BOT_TOKEN}/sendMessage",
                params={"chat_id": chat_id, "text": message}
            )
            if response.status_code != 200:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


order_handler = Order()


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_order_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data="accept"),
            InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decline")
        ]
    ])
    return kb


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-—Å–æ–±—ã—Ç–∏–π
@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback_data
    if callback.data == "accept":
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è 
        msg = "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã –Ω–∞—á–∞–ª–∏ –µ–≥–æ –≥–æ—Ç–æ–≤–∏—Ç—å!"
        req = requests.get(
                f"https://api.telegram.org/bot{order_handler.CLIENT_BOT_TOKEN}/sendMessage",
                params={
                    "chat_id": orderr["client"], 
                    "text": msg
                }
            )
        print(orderr["client"])
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        await callback.message.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑! –ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
    
    elif callback.data == "decline":
        # –ó–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ—ë —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        )
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        @dp.message()
        async def handle_decline_reason(message: types.Message):
            reason = message.text
            client_chat_id = orderr["client"]
            client_message = (
                f"–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ú—ã –∏–∑–≤–∏–Ω—è–µ–º—Å—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
            order_handler._send_telegram_message(client_chat_id, client_message)
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
            await message.answer("–ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ.")
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ callback-–∑–∞–ø—Ä–æ—Å–∞
    await callback.answer()


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
async def check_for_new_orders():
    global last_processed_order_id
    while True:
        try:
            last_order_id = redis_client.get("order_id")
            if last_order_id and int(last_order_id) > last_processed_order_id:
                last_processed_order_id = int(last_order_id)
                last_order_data = redis_client.get(f"order:{last_order_id}")
                if last_order_data:
                    global orderr
                    orderr = json.loads(last_order_data)
                    formatted_order = format_order(orderr)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                    for chat_id in ADMIN_CHAT_IDS:
                        try:
                            await bot.send_message(chat_id, formatted_order, reply_markup=get_order_keyboard())
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")

        await asyncio.sleep(0.1)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É. –í–∞—à ID: {message.chat.id}")
